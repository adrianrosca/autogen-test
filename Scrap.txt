import "reflect-metadata";
import { readdirSync, readFileSync } from "node:fs";
import { join } from "node:path";
import { generateSchema } from "./1.generate-schema";

// function to get all model types from src/models
// ------------------------------------------------------------------------------------------
function getModelTypes(): string[] {
	const modelsDir = join(process.cwd(), "src", "models");
	const modelFiles = readdirSync(modelsDir).filter((file) =>
		file.endsWith(".ts"),
	);
	return modelFiles.map((file) => file.replace(".ts", ""));
}

// function to extract fields from a Typegoose model file
// ------------------------------------------------------------------------------------------
function extractFields(modelName: string): { [key: string]: string } {
	const modelPath = join(process.cwd(), "src", "models", `${modelName}.ts`);
	const fileContent = readFileSync(modelPath, "utf-8");

	// RegEx to match @Field decorators and their types
	const fieldRegex =
		/@Field\(\(\)\s*=>\s*(\w+)\)\s*\n\s*@prop\([^)]*\)\s*\n\s*(\w+)!/g;
	const fields: { [key: string]: string } = {};
	let match: RegExpExecArray | null;

	// Assign first match outside the while loop
	match = fieldRegex.exec(fileContent);

	// Iterate through all matches
	while (match !== null) {
		const graphqlType = match[1]; // Extract GraphQL type from @Field decorator
		const fieldName = match[2]; // Extract the field name after @prop
		let fieldType: string | undefined;

		// Map TypeScript types to GraphQL types if needed
		if (graphqlType === "String") fieldType = "String";
		if (graphqlType === "Number") fieldType = "Float";
		if (graphqlType === "Boolean") fieldType = "Boolean";
		if (graphqlType === "ID") fieldType = "ID";

		fields[fieldName] = fieldType || graphqlType;

		// Move to the next match
		match = fieldRegex.exec(fileContent);
	}

	return fields;
}

// main function to run all generators for each type
// ------------------------------------------------------------------------------------------
async function generateAll(): Promise<void> {
	const modelTypes = getModelTypes();

	for (const type of modelTypes) {
		console.log(`Generating for model: ${type}`);

		// Extract fields dynamically from the model file
		const fields = extractFields(type);
		console.log(`Fields for ${type}:`, fields);

		// Run the generators for the current type with extracted fields
		await generateSchema(type, fields);
		// await generateIntrospection(type); // Call with type or necessary arguments
		// await generateGraphql(type); // Call with type or necessary arguments
		// await generateResolver(type); // Call with type or necessary arguments
	}

	console.log("All models have been processed.");
}

// start generation
generateAll().catch(console.error);
